import random

class StockAdvisor:
    def __init__(self, balance=10000, risk="medium"):
        self.balance = balance
        self.portfolio = {}
        self.risk = risk
        self.stock_history = {"Apple": [150, 153, 157, 160], "Google": [2700, 2720, 2750, 2770]}
        self.news_sentiment = {"Apple": 0.5, "Google": -0.3}

    def get_price(self, stock, day):
        return self.stock_history.get(stock, [])[day]

    def price_change(self, stock, day):
        return (self.get_price(stock, day) - self.get_price(stock, day - 1)) / self.get_price(stock, day - 1)

    def get_sentiment(self, stock):
        return self.news_sentiment.get(stock, 0)

    def utility(self, stock, action, day):
        price_weight, sentiment_weight = (0.6, 0.4) if self.risk == "high" else (0.4, 0.6)
        price_change = self.price_change(stock, day)
        sentiment = self.get_sentiment(stock)
        if action == "buy":
            return price_change * price_weight + sentiment * sentiment_weight
        elif action == "sell":
            return -price_change * price_weight + sentiment * sentiment_weight
        else:
            return sentiment * sentiment_weight

    def decision(self, stock, day):
        actions = ["buy", "sell", "hold"]
        utilities = [self.utility(stock, action, day) for action in actions]
        return actions[utilities.index(max(utilities))]

    def buy(self, stock, qty, day):
        price = self.get_price(stock, day)
        if self.balance >= price * qty:
            self.balance -= price * qty
            self.portfolio[stock] = self.portfolio.get(stock, 0) + qty

    def sell(self, stock, qty, day):
        price = self.get_price(stock, day)
        if stock in self.portfolio and self.portfolio[stock] >= qty:
            self.balance += price * qty
            self.portfolio[stock] -= qty
            if self.portfolio[stock] == 0:
                del self.portfolio[stock]

    def simulate(self, days=4):
        for day in range(1, days):
            for stock in self.stock_history:
                action = self.decision(stock, day)
                if action == "buy": self.buy(stock, 1, day)
                elif action == "sell": self.sell(stock, 1, day)
                print(f"Action: {action} | Portfolio: {self.portfolio} | Balance: {self.balance}")

advisor = StockAdvisor(risk="high")
advisor.simulate()
